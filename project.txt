# Just Code Works (JCW) - Fresh Project Setup Prompt

## Project Overview
I need help creating a modern multi-tenant SaaS platform called "Just Code Works" that allows users to build professional websites using pre-designed templates and sections. This is a COMPLETE FRESH START - please create everything from scratch with modern best practices.

## Technical Requirements

### Frontend Framework
- **Next.js 15** with TypeScript
- **App Router** structure (not pages router)
- **Tailwind CSS** for styling
- **React 19** with modern hooks and patterns

### Internationalization
- **next-intl** for multi-language support
- Languages: English (default), Spanish, French, German
- Locale-based routing: `/en`, `/es`, `/fr`, `/de`
- Proper translation file structure

### Backend Integration
- Connect to existing Django API at `http://127.0.0.1:8000`
- JWT authentication system (already working)
- API endpoints available for templates, sections, user management

### Project Structure Needed
```
src/
├── app/
│   ├── [locale]/
│   │   ├── layout.tsx          # Root layout with i18n
│   │   ├── page.tsx            # Homepage
│   │   ├── dashboard/
│   │   │   ├── admin/          # Admin panel
│   │   │   │   ├── page.tsx    # Admin dashboard
│   │   │   │   ├── templates/  # Template management
│   │   │   │   ├── sections/   # Section management
│   │   │   │   └── users/      # User management
│   │   │   └── user/           # User dashboard
│   │   │       ├── page.tsx    # User dashboard
│   │   │       ├── my-site/    # Site builder
│   │   │       └── settings/   # User settings
│   │   └── websites/
│   │       └── [slug]/         # Generated user sites
│   ├── api/                    # API routes (if needed)
│   └── globals.css
├── components/
│   ├── ui/                     # Reusable UI components
│   ├── admin/                  # Admin-specific components
│   ├── user/                   # User dashboard components
│   └── website-builder/        # Site building components
├── lib/
│   ├── api.ts                  # API client for Django backend
│   ├── auth.ts                 # JWT authentication
│   └── utils.ts                # Utility functions
├── messages/                   # Translation files
│   ├── en.json
│   ├── es.json
│   ├── fr.json
│   └── de.json
└── middleware.ts               # i18n middleware
```

## Key Features to Implement

### 1. Authentication System
- JWT token management
- Login/logout functionality
- Protected routes for dashboard areas
- Role-based access (admin vs user)

### 2. Homepage
- Modern, professional design
- Multi-language navigation
- Hero section showcasing the platform
- Feature highlights
- Responsive design

### 3. Admin Dashboard
- Template management (CRUD operations)
- Section library management
- User management
- Analytics overview
- Multi-language admin interface

### 4. User Dashboard
- Site overview and statistics
- Website builder interface
- Template selection
- Section customization
- Site publishing controls

### 5. Website Builder
- Drag-and-drop section management
- Real-time preview
- Template-based site creation
- Custom styling options
- Multi-language website support

## Design Requirements
- Modern, clean design with professional aesthetics
- Consistent color scheme and typography
- Responsive design (mobile-first approach)
- Accessibility compliance (WCAG guidelines)
- Loading states and error handling
- Smooth animations and transitions

## API Integration Details
The Django backend is already running at `http://127.0.0.1:8000` with these endpoints:
- `/api/auth/login/` - JWT authentication
- `/api/templates/` - Template management
- `/api/sections/` - Section management
- `/api/users/` - User management
- Authentication: Bearer token in headers

## Configuration Requirements
- **ESLint** and **Prettier** for code quality
- **TypeScript** strict mode
- **Tailwind CSS** with custom theme
- **Environment variables** for API URLs
- **Package.json** with proper scripts

## Specific Implementation Notes
1. Use `next-intl` with proper provider setup in layout
2. Implement middleware for locale detection and routing
3. Create reusable API client with JWT token management
4. Use React Server Components where appropriate
5. Implement proper error boundaries
6. Add loading states for all async operations

## What NOT to Include
- No authentication backend (Django handles this)
- No database setup (Django API provides data)
- Don't recreate existing API endpoints

## Critical Technical Notes & Common Pitfalls

### Windows PowerShell Command Issues
**IMPORTANT**: Avoid these command syntax errors that caused hours of debugging:

❌ **DON'T USE**: `&&` operator in PowerShell
```powershell
# This FAILS in PowerShell:
cd "path" && npm run dev
```

✅ **DO USE**: Semicolons `;` or separate commands
```powershell
# These WORK in PowerShell:
cd "path"; npm run dev
# OR
Set-Location "path"
npm run dev
```

### Server Management Best Practices
- **Always kill processes first**: `taskkill /f /im python.exe 2>$null; taskkill /f /im node.exe 2>$null`
- **Use absolute paths**: `C:\projects\studio\jcw\apps\api` instead of relative paths
- **Activate virtual environment**: `& "C:\projects\studio\.venv\Scripts\Activate.ps1"`
- **Check ports before starting**: `netstat -ano | findstr ":3000 :8000"`

### Next.js Development Issues
- **Clear build cache frequently**: `Remove-Item -Recurse -Force ".next" -ErrorAction SilentlyContinue`
- **Use TypeScript checking**: `npx tsc --noEmit` before running dev server
- **Test different ports if 3000 is blocked**: `npm run dev -- -p 3001`

### Django API Management
- **Proper command structure**: 
  ```powershell
  cd "C:\projects\studio\jcw\apps\api"
  & "C:\projects\studio\.venv\Scripts\Activate.ps1"
  python manage.py runserver 127.0.0.1:8000
  ```

### Alternative Commands for Stuck Situations
If commands fail, try these alternatives:
1. **CMD instead of PowerShell**: `cmd /c "cd /d C:\projects\studio\jcw\apps\web && npm run dev"`
2. **Direct batch files**: Create `.bat` files for complex command sequences
3. **PowerShell jobs for background**: `Start-Job -ScriptBlock { ... }` for servers
4. **Path troubleshooting**: Always verify with `Get-Location` and `Test-Path`

### Translation System Gotchas
- **Middleware conflicts**: If build fails, temporarily rename `middleware.ts` to debug
- **Locale routing**: Ensure `[locale]` folder structure is correct
- **Provider setup**: NextIntlClientProvider must wrap all client components

## Immediate First Steps Needed
1. Create clean Next.js 15 project structure
2. Set up internationalization with next-intl
3. Configure Tailwind CSS with custom theme
4. Create basic layout with navigation
5. Implement API client for Django integration
6. Build authentication system
7. Create homepage with modern design

## Success Criteria
- All language switching works perfectly (URL + content)
- Admin and user dashboards are fully functional
- Website builder allows template selection and customization
- Responsive design works on all devices
- No build errors or TypeScript issues
- Clean, maintainable code structure

Please start by creating the project structure and implementing the core internationalization system. Focus on getting the basic framework working before adding complex features.

1) Context & Goals

Platform name: Just Code Works (JCW)

Stack: Django (API + back office) + Next.js (front-end dashboards + public site)

Tenancy: Subdomain-based (preferred) e.g. marysrestaurant.justcodeworks.eu.

Website Types (MVP): One Page, Multi Page, eCommerce (placeholder), “More coming soon…”

Dashboards:

Admin Dashboard (for JCW operators)

User Dashboard (for each client/tenant)

Template System: Upload reusable Sections (atoms) and Templates (composed from sections). Each section is portable across templates. Naming convention example: jcw-rest-01-hero01, jcw-rest-01-nav01, etc.

Onboarding Flow: When a user starts, they fill basic details (Business Name, Category, Location, Primary Color, etc.). The system suggests a development subdomain (slugified name) and spins up a tenant with default template + sections.

Non-goals (for v0): No payments, no custom domains, no email sending, no external SSO. Keep these stubbed.

2) Deliverables (v0 → v1)
v0 — Foundations (scaffold + structure)

Clean repo structure for Django API and Next.js app with clear boundaries.

Multi-tenant strategy defined (prefer subdomain tenancy).

Section/Template data model and CRUD via API (no code yet; just contract/spec).

Two dashboards IA & wireframes (Admin/User) with routes and component inventory planned.

Onboarding flow spec: inputs, validation rules, slug strategy, and subdomain rules.

Acceptance criteria for each milestone.

v1 — MVP features

Admin uploads/manages Sections and Templates (metadata: name, slug, category, tags, device support, preview thumbnail, allowed placements).

User selects Website Type → launches guided builder that assembles a site from sections.

On submit, system provisions tenant with a dev subdomain and a default composed page set.

User Dashboard basic views: “My Site”, “Sections Library (read-only)”, “Theme Settings”, “Preview”.

Admin Dashboard: “Tenants”, “Templates”, “Sections”, “Moderation queue”, “Activity log”.

3) Architecture Principles

Separation of concerns:

Django = API, auth, tenancy, persistence, background jobs, file storage abstraction.

Next.js = public marketing site + both dashboards (app router), SSR for SEO where needed.

Auth strategy: Django issues short-lived JWTs (or session tokens) for Next.js; Next.js stores auth safely (httpOnly cookies). CSRF safe endpoints for form posts.

Tenancy:

Preferred: django-tenants (or equivalent) with schema per tenant.

Subdomain routing: *.justcodeworks.eu for tenant sites; apex hosts the marketing site + builder entry.

Section system:

Abstract Section entity: id, slug, name, category (hero/nav/feature/gallery/cta/footer), framework (Next), version, JSON schema for props, preview image, status (draft/approved), compatibility flags.

Template = ordered list of Section refs + layout constraints.

Composability rules: e.g., one nav max per page, hero must be first, footer last.

Content storage: Postgres for structured data; object storage (e.g., local dev folder; later S3/compatible) for previews/uploads.

Naming convention: jcw-<vertical>-<kit#>-<sectionType><nn> (e.g., jcw-rest-02-hero01).

Internationalization (later): EN/NL/PT scaffold only; no translation work in v0.

4) UX Flows (high-level)

Marketing Site → “Build your website”

Choose type: One Page / Multi Page / eCommerce / More coming soon

“Start” → Onboarding form

Onboarding Form

Fields: Business Name, Industry, City/Country, Primary Color, Contact Email/Phone

Slug preview live: “marysrestaurant → marysrestaurant.justcodeworks.eu” (if taken, add suffix -1)

Summary → Confirm → Create tenant (async job acceptable) → Redirect to User Dashboard

User Dashboard (Tenant)

“My Site” overview: dev subdomain, status, last edited

“Theme Settings”: color/typography presets

“Sections Library” (read-only): browse approved sections, add to page builder (MVP can be simple list/apply)

“Preview” button opens the dev subdomain

Admin Dashboard

“Sections”: upload/update, set metadata, approve/publish

“Templates”: define default compositions per website type

“Tenants”: list/search, open Tenant detail, impersonate (admin-only)

“Activity log”: basic audit

5) Contracts & Acceptance Criteria (no code yet)

API Contracts (draft):

POST /api/onboarding/start → create tenant request

GET /api/sections?filters → list with pagination, categories, tags

POST /api/sections (admin): upload metadata + preview; validate naming convention

POST /api/templates (admin): define ordered section list + rules

POST /api/tenants/{id}/compose (admin/user): apply template to tenant

Slug rules: lowercase, alphanumeric + single hyphens, collapse whitespace, max length 30, reserved words list, uniqueness per subdomain.

Composability rules: enforce server-side validation (hero first, footer last, 1 nav max).

Security: per-tenant isolation verified; no cross-tenant reads; admin actions audited.

DX: one-command local run for both apps (later), readable logs, clear env vars.

6) Iteration Protocol (how we work together)

When I say “Start v0 planning”, do the following in order:

Confirm folder/repo plan with a short diagram and reasons.

List all env vars needed (names + purpose, no secrets).

Propose data models (names/fields/relationships) for: Tenant, Section, Template, Page, SiteTheme, ActivityLog, User (roles: admin, tenant_admin, tenant_user).

Define API endpoints (names only, no payloads yet).

Write IA (information architecture) for both dashboards: routes, page titles, and intended components.

Draft acceptance criteria for v0 and v1 as checklists.

Identify risks/unknowns (e.g., subdomain routing locally, multi-tenant migrations) and propose mitigations.

Only after I type “Proceed to scaffolding” should you:

Generate the minimal scaffolds and config files, with Windows CMD commands.

Create placeholder pages and empty endpoints.

No business logic yet—just structure, wiring, and lint/test baselines.

Only after I type “Implement v0” should you:

Add data models and non-UI API logic.

Add dashboards with skeleton pages/components (no styling polish).

Enforce slug/section rules and tenancy guards.

At each stage, summarize changes and list files affected. Ask before adding any new dependency outside the agreed stack.

7) Constraints & Preferences

OS + Shell: Windows 10+, VS Code, CMD commands only.

Clean commits: Conventional commits (feat:, chore:, refactor:).

Lint/format: Precommit hooks later; keep defaults simple for now.

Testing: Minimal smoke tests for API contracts once endpoints exist.

Docs: Keep a /docs folder with short READMEs for: run, env, tenancy, sections.

Performance: Prefer server-side rendering for dashboard lists; paginate.

Accessibility: Basic ARIA landmarks in Next pages from the start.

8) Naming, Taxonomy & Cataloging

Verticals: e.g., rest (restaurants), svc (services), shop (commerce).

Kits: incrementing numbers per vertical (rest-01, rest-02, …).

Section types: nav, hero, feature, gallery, testimonial, cta, footer.

Example names: jcw-rest-02-hero01, jcw-svc-01-nav01.

Metadata tags: dark, light, minimal, bold, photo-heavy, rtl-ready (future).

9) Subdomain Strategy (MVP)

Preferred: {{slug}}.justcodeworks.eu for dev.

Slug generation: strip diacritics, alnum only, hyphens for spaces, collapse duplicates, ensure uniqueness; auto-suffix (-1, -2) on collision.

Local dev routing: propose an approach (e.g., wildcard hosts via local proxy or host file strategy) and document it.

10) What I want from you first

Task 1 — Planning Pack (no code):

Repo structure proposal (diagram + rationale)

Env var inventory

Data model list (names + fields only)

API surface list (names only)

IA maps for Admin & User dashboards

Acceptance criteria checklists (v0, v1)

Risks & mitigations

Output format: clear headings, bullet lists, and short tables—no code.

I will review and then say either “Revise plan” or “Proceed to scaffolding.”

Optional Add-Ons (keep at bottom; only act on if I say so)

Add-On A — Multi-language plan: Propose how to add EN/NL/PT later (resource files vs DB).
Add-On B — eCommerce placeholder: Define minimal entities (Product, Price, Catalog) to unblock future work.
Add-On C — Styling system: Suggest using shadcn/ui + Tailwind for dashboards; neutral theme first.
Add-On D — Telemetry: Recommend minimal structured logging + request IDs for API.